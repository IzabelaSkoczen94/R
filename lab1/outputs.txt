[Workspace loaded from C:/Users/IzuÅ›/Desktop/lab1_swd/.RData]

> library("MCDA")
> 
> rm(list = ls())
> # ----------------------------------------
> epsilon <- 0.01
> 
> additiveValueFunctionElicitation
function (performanceTable, criteriaMinMax, epsilon, alternativesRanks = NULL, 
    alternativesPreferences = NULL, alternativesIndifferences = NULL, 
    alternativesIDs = NULL, criteriaIDs = NULL) 
{
    if (!((is.matrix(performanceTable) || (is.data.frame(performanceTable))))) 
        stop("wrong performanceTable, should be a matrix or a data frame")
    if (!(is.null(alternativesRanks) || is.vector(alternativesRanks))) 
        stop("alternativesRanks should be a vector")
    if (!(is.null(alternativesPreferences) || is.matrix(alternativesPreferences))) 
        stop("alternativesPreferences should be a matrix")
    if (!(is.null(alternativesIndifferences) || is.matrix(alternativesIndifferences))) 
        stop("alternativesIndifferences should be a matrix")
    if (is.null(alternativesRanks) && is.null(alternativesPreferences) && 
        is.null(alternativesIndifferences)) 
        stop("at least one of alternativesRanks, alternativesPreferences or alternativesIndifferences should not be NULL")
    if (!is.null(alternativesRanks) && (!is.null(alternativesPreferences) | 
        !is.null(alternativesIndifferences))) 
        stop("alternativesRanks and one of alternativesPreferences or alternativesIndifferences cannot be simultaneously not NULL")
    if (!(is.vector(criteriaMinMax))) 
        stop("criteriaMinMax should be a vector")
    if (!(is.null(alternativesIDs) || is.vector(alternativesIDs))) 
        stop("alternativesIDs should be in a vector")
    if (!(is.null(criteriaIDs) || is.vector(criteriaIDs))) 
        stop("criteriaIDs should be in a vector")
    if (!is.null(alternativesIDs)) {
        performanceTable <- performanceTable[alternativesIDs, 
            ]
        if (!is.null(alternativesRanks)) 
            alternativesRanks <- alternativesRanks[alternativesIDs]
        if (!is.null(alternativesPreferences)) {
            tmpIds <- intersect(alternativesPreferences, alternativesIDs)
            tmpMatrix <- c()
            for (i in 1:dim(alternativesPreferences)[1]) {
                if (all(alternativesPreferences[i, ] %in% tmpIds)) 
                  tmpMatrix <- rbind(tmpMatrix, alternativesPreferences[i, 
                    ])
            }
            alternativesPreferences <- tmpMatrix
        }
        if (!is.null(alternativesIndifferences)) {
            tmpIds <- intersect(alternativesIndifferences, alternativesIDs)
            tmpMatrix <- c()
            for (i in 1:dim(alternativesIndifferences)[1]) {
                if (all(alternativesIndifferences[i, ] %in% tmpIds)) 
                  tmpMatrix <- rbind(tmpMatrix, alternativesIndifferences[i, 
                    ])
            }
            alternativesIndifferences <- tmpMatrix
        }
    }
    if (!is.null(criteriaIDs)) {
        criteriaMinMax <- criteriaMinMax[criteriaIDs]
        performanceTable <- performanceTable[, criteriaIDs]
    }
    if (!is.null(alternativesRanks)) {
        reallyActiveAlternatives <- intersect(rownames(performanceTable), 
            names(alternativesRanks))
        if (length(reallyActiveAlternatives) != 0) {
            performanceTable <- performanceTable[reallyActiveAlternatives, 
                ]
            alternativesRanks <- alternativesRanks[reallyActiveAlternatives]
        }
        else {
            stop("alternatives of alternativesRanks are not compatible with those of performanceTable")
        }
    }
    if (!is.null(alternativesPreferences) || !is.null(alternativesIndifferences)) {
        reallyActiveAlternatives <- intersect(rownames(performanceTable), 
            rbind(alternativesPreferences, alternativesIndifferences))
        if (length(reallyActiveAlternatives) != 0) {
            performanceTable <- performanceTable[reallyActiveAlternatives, 
                ]
            if (!is.null(alternativesPreferences)) {
                tmpIds <- intersect(alternativesPreferences, 
                  reallyActiveAlternatives)
                tmpMatrix <- c()
                for (i in 1:dim(alternativesPreferences)[1]) {
                  if (all(alternativesPreferences[i, ] %in% tmpIds)) 
                    tmpMatrix <- rbind(tmpMatrix, alternativesPreferences[i, 
                      ])
                }
                alternativesPreferences <- tmpMatrix
            }
            if (!is.null(alternativesIndifferences)) {
                tmpIds <- intersect(alternativesIndifferences, 
                  reallyActiveAlternatives)
                tmpMatrix <- c()
                for (i in 1:dim(alternativesIndifferences)[1]) {
                  if (all(alternativesIndifferences[i, ] %in% 
                    tmpIds)) 
                    tmpMatrix <- rbind(tmpMatrix, alternativesIndifferences[i, 
                      ])
                }
                alternativesIndifferences <- tmpMatrix
            }
        }
        else {
            stop("alternatives of alternativesPreferences or alternativesIndifferences are not compatible with those of performanceTable")
        }
    }
    if (is.null(dim(performanceTable))) 
        stop("less than 2 criteria or 2 alternatives")
    if (is.null(alternativesRanks) && is.null(alternativesPreferences) && 
        is.null(alternativesIndifferences)) 
        stop("after filtering none of alternativesRanks, alternativesPreferences or alternativesIndifferences is not NULL")
    numCrit <- dim(performanceTable)[2]
    numAlt <- dim(performanceTable)[1]
    criteriaBreakPoints <- list()
    for (i in 1:numCrit) {
        tmp <- c()
        tmp <- unique(performanceTable[, i])
        if (criteriaMinMax[i] == "min") 
            tmp <- sort(tmp, decreasing = TRUE)
        else tmp <- sort(tmp)
        criteriaBreakPoints <- c(criteriaBreakPoints, list(tmp))
    }
    names(criteriaBreakPoints) <- colnames(performanceTable)
    criteriaNumberOfBreakPoints <- c()
    for (i in 1:numCrit) {
        criteriaNumberOfBreakPoints <- c(criteriaNumberOfBreakPoints, 
            length(criteriaBreakPoints[[i]]))
    }
    a <- matrix(0, nrow = numAlt, ncol = (sum(criteriaNumberOfBreakPoints) + 
        numAlt))
    for (n in 1:numAlt) {
        for (m in 1:numCrit) {
            j <- which(performanceTable[n, m] == criteriaBreakPoints[[m]])
            if (m == 1) 
                pos <- j
            else pos <- sum(criteriaNumberOfBreakPoints[1:(m - 
                1)]) + j
            a[n, pos] <- 1
            a[n, dim(a)[2] - numAlt + n] <- 1
        }
    }
    obj <- rep(0, sum(criteriaNumberOfBreakPoints))
    obj <- c(obj, rep(1, numAlt))
    preferenceConstraints <- matrix(nrow = 0, ncol = sum(criteriaNumberOfBreakPoints) + 
        numAlt)
    indifferenceConstraints <- matrix(nrow = 0, ncol = sum(criteriaNumberOfBreakPoints) + 
        numAlt)
    if (!is.null(alternativesRanks)) {
        indexOrder <- c()
        orderedAlternativesRanks <- sort(alternativesRanks)
        tmpRanks1 <- alternativesRanks
        tmpRanks2 <- alternativesRanks
        while (length(orderedAlternativesRanks) != 0) {
            tmpIndex <- which(alternativesRanks == orderedAlternativesRanks[1])
            for (j in 1:length(tmpIndex)) indexOrder <- c(indexOrder, 
                tmpIndex[j])
            orderedAlternativesRanks <- orderedAlternativesRanks[-which(orderedAlternativesRanks == 
                orderedAlternativesRanks[1])]
        }
        for (i in 1:(length(alternativesRanks) - 1)) {
            if (alternativesRanks[indexOrder[i]] == alternativesRanks[indexOrder[i + 
                1]]) {
                indifferenceConstraints <- rbind(indifferenceConstraints, 
                  a[indexOrder[i], ] - a[indexOrder[i + 1], ])
            }
            else {
                preferenceConstraints <- rbind(preferenceConstraints, 
                  a[indexOrder[i], ] - a[indexOrder[i + 1], ])
            }
        }
    }
    if (!is.null(alternativesPreferences)) {
        for (i in 1:dim(alternativesPreferences)[1]) {
            preferenceConstraints <- rbind(preferenceConstraints, 
                a[which(rownames(performanceTable) == alternativesPreferences[i, 
                  1]), ] - a[which(rownames(performanceTable) == 
                  alternativesPreferences[i, 2]), ])
        }
    }
    if (!is.null(alternativesIndifferences)) {
        for (i in 1:dim(alternativesIndifferences)[1]) {
            indifferenceConstraints <- rbind(indifferenceConstraints, 
                a[which(rownames(performanceTable) == alternativesIndifferences[i, 
                  1]), ] - a[which(rownames(performanceTable) == 
                  alternativesIndifferences[i, 2]), ])
        }
    }
    mat <- rbind(preferenceConstraints, indifferenceConstraints)
    rhs <- c()
    if (dim(preferenceConstraints)[1] != 0) {
        for (i in (1:dim(preferenceConstraints)[1])) rhs <- c(rhs, 
            epsilon)
    }
    if (dim(indifferenceConstraints)[1] != 0) {
        for (i in (1:dim(indifferenceConstraints)[1])) rhs <- c(rhs, 
            0)
    }
    dir <- c()
    if (dim(preferenceConstraints)[1] != 0) {
        for (i in (1:dim(preferenceConstraints)[1])) dir <- c(dir, 
            ">=")
    }
    if (dim(indifferenceConstraints)[1] != 0) {
        for (i in (1:dim(indifferenceConstraints)[1])) dir <- c(dir, 
            "==")
    }
    monotonicityConstraints <- matrix(nrow = 0, ncol = sum(criteriaNumberOfBreakPoints) + 
        numAlt)
    for (i in 1:length(criteriaNumberOfBreakPoints)) {
        for (j in 1:(criteriaNumberOfBreakPoints[i] - 1)) {
            tmp <- rep(0, sum(criteriaNumberOfBreakPoints) + 
                numAlt)
            if (i == 1) 
                pos <- j
            else pos <- sum(criteriaNumberOfBreakPoints[1:(i - 
                1)]) + j
            tmp[pos] <- -1
            tmp[pos + 1] <- 1
            monotonicityConstraints <- rbind(monotonicityConstraints, 
                tmp)
        }
    }
    mat <- rbind(mat, monotonicityConstraints)
    for (i in (1:dim(monotonicityConstraints)[1])) dir <- c(dir, 
        ">=")
    for (i in (1:dim(monotonicityConstraints)[1])) rhs <- c(rhs, 
        0)
    tmp <- rep(0, sum(criteriaNumberOfBreakPoints) + numAlt)
    for (i in 1:length(criteriaNumberOfBreakPoints)) {
        if (i == 1) 
            pos <- criteriaNumberOfBreakPoints[i]
        else pos <- sum(criteriaNumberOfBreakPoints[1:(i - 1)]) + 
            criteriaNumberOfBreakPoints[i]
        tmp[pos] <- 1
    }
    mat <- rbind(mat, tmp)
    dir <- c(dir, "==")
    rhs <- c(rhs, 1)
    minValueFunctionsConstraints <- matrix(nrow = 0, ncol = sum(criteriaNumberOfBreakPoints) + 
        numAlt)
    for (i in 1:length(criteriaNumberOfBreakPoints)) {
        tmp <- rep(0, sum(criteriaNumberOfBreakPoints) + numAlt)
        if (i == 1) 
            pos <- i
        else pos <- sum(criteriaNumberOfBreakPoints[1:(i - 1)]) + 
            1
        tmp[pos] <- 1
        minValueFunctionsConstraints <- rbind(minValueFunctionsConstraints, 
            tmp)
    }
    mat <- rbind(mat, minValueFunctionsConstraints)
    for (i in (1:dim(minValueFunctionsConstraints)[1])) dir <- c(dir, 
        "==")
    for (i in (1:dim(minValueFunctionsConstraints)[1])) rhs <- c(rhs, 
        0)
    lpSolution <- Rglpk_solve_LP(obj, mat, dir, rhs)
    valueFunctions <- list()
    for (i in 1:length(criteriaNumberOfBreakPoints)) {
        tmp <- c()
        if (i == 1) 
            pos <- 0
        else pos <- sum(criteriaNumberOfBreakPoints[1:(i - 1)])
        for (j in 1:criteriaNumberOfBreakPoints[i]) {
            tmp <- c(tmp, lpSolution$solution[pos + j])
        }
        tmp <- rbind(criteriaBreakPoints[[i]], tmp)
        colnames(tmp) <- NULL
        rownames(tmp) <- c("x", "y")
        valueFunctions <- c(valueFunctions, list(tmp))
    }
    names(valueFunctions) <- colnames(performanceTable)
    overallValues <- as.vector(t(a[, 1:sum(criteriaNumberOfBreakPoints)] %*% 
        lpSolution$solution[1:sum(criteriaNumberOfBreakPoints)]))
    names(overallValues) <- rownames(performanceTable)
    errorValues <- as.vector(lpSolution$solution[(sum(criteriaNumberOfBreakPoints) + 
        1):length(lpSolution$solution)])
    names(errorValues) <- rownames(performanceTable)
    outRanks <- rank(-overallValues, ties.method = "min")
    if ((numAlt >= 3) && !is.null(alternativesRanks)) 
        tau = cor(alternativesRanks, outRanks, method = "kendall")
    else tau = NULL
    out <- list(optimum = round(lpSolution$optimum, digits = 5), 
        valueFunctions = valueFunctions, overallValues = round(overallValues, 
            digits = 5), ranks = outRanks, errors = round(errorValues, 
            digits = 5), Kendall = tau)
    return(out)
}
<environment: namespace:MCDA>
> 
> # the numeric data table
> numericDataTable <- rbind(
+   c(1440.900, 8, 128, 3699),
+   c(2560.1600, 8, 128, 5699),
+   c(2304.1440, 8, 256, 5899),
+   c(2560.1600, 8, 512, 8999),
+   c(2560.1600, 8, 512, 8999),
+   c(2034.1440, 8, 512, 7199),
+   c(2304.1440, 8, 512, 7999),
+   c(2560.1600, 8, 256, 7999),
+   c(2560.1600, 8, 512, 9599),
+   c(2560.1600, 16, 10599)
+ )
Warning message:
In rbind(c(1440.9, 8, 128, 3699), c(2560.16, 8, 128, 5699), c(2304.144,  :
  number of columns of result is not a multiple of vector length (arg 10)
> rownames(numericDataTable) <- c(
+   "i5-5360U",
+   "i5-7360U",
+   "M-series77Y32",
+   "i5-7267U",
+   "i5-7267U2",
+   "i5-7Y54",
+   "m5Y51",
+   "i5-726U",
+   "i5-6267U",
+   "i5-7267U3")
> colnames(numericDataTable) <- c(
+   "Ekran",
+   "RAM",
+   "Dysk",
+   "Cena")
> 
> # ranks of the alternatives
> alternativesRanks <- c(1,2,3,4,5,6,7,8,9,10)
> names(alternativesRanks) <- row.names(numericDataTable)
> 
> # criteria to minimise or maximize
> criteriaMinMax <- c("max","max","max","min")
> names(criteriaMinMax) <- colnames(numericDataTable)
> x <- additiveValueFunctionElicitation(numericDataTable,
+                                       criteriaMinMax, epsilon,
+                                       alternativesRanks = alternativesRanks)
> 
> print(x)
$optimum
[1] 1.45

$valueFunctions
$valueFunctions$Ekran
    [,1]     [,2]     [,3]    [,4]
x 1440.9 2034.144 2304.144 2560.16
y    0.0    1.000    1.000    1.00

$valueFunctions$RAM
  [,1] [,2]
x    8   16
y    0    0

$valueFunctions$Dysk
  [,1] [,2] [,3]  [,4]
x  128  256  512 10599
y    0    0    0     0

$valueFunctions$Cena
  [,1] [,2] [,3] [,4] [,5] [,6] [,7]    [,8]
x 9599 8999 7999 7199 5899 5699 3699 2560.16
y    0    0    0    0    0    0    0    0.00


$overallValues
     i5-5360U      i5-7360U M-series77Y32      i5-7267U     i5-7267U2       i5-7Y54         m5Y51 
            0             1             1             1             1             1             1 
      i5-726U      i5-6267U     i5-7267U3 
            1             1             1 

$ranks
     i5-5360U      i5-7360U M-series77Y32      i5-7267U     i5-7267U2       i5-7Y54         m5Y51 
           10             1             1             1             1             1             1 
      i5-726U      i5-6267U     i5-7267U3 
            1             1             1 

$errors
     i5-5360U      i5-7360U M-series77Y32      i5-7267U     i5-7267U2       i5-7Y54         m5Y51 
         1.09          0.08          0.07          0.06          0.05          0.04          0.03 
      i5-726U      i5-6267U     i5-7267U3 
         0.02          0.01          0.00 

$Kendall
[1] -0.4472136
